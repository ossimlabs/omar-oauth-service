//==================================================================================================
// This is the Jenkins pipeline script for building the OMAR Avro Metadata application.
// Environment variables that MUST be passed in by Jenkins:
//    OSSIM_GIT_BRANCH: The tag of the branch to be built. Typically dev or master.
//
// Environment varaibles that MUST be set in the Jenkins global environment (manage jenkins -> configure system -> environment varaibles)
//    REPOSITORY_MANAGER_USER: The user to use when pushing artifacts
//    REPOSITORY_MANAGER_PASSWORD: The password to use when pushing artifacts
//    OPENSHIFT_USERNAME: The user to use logging into the docker registry
//    OPENSHIFT_PASSWORD: The password to use logging into the docker registry
//==================================================================================================

node("omar-build"){
    def workspaceDir = pwd()
    def appName = "omar-oauth-service"
    def omarCommonProjName = "omar-common"
    env.OMAR_COMMON_PROPERTIES="${workspaceDir}/${omarCommonProjName}/omar-common-properties.gradle"

    stage("Checkout"){
        dir(appName) {
            git branch: "${OSSIM_GIT_BRANCH}", url: "${GIT_PUBLIC_SERVER_URL}/${appName}.git"
        }

        dir(omarCommonProjName) {
            git branch: "${OSSIM_GIT_BRANCH}", url: "${GIT_PUBLIC_SERVER_URL}/${omarCommonProjName}.git"
        }
    }

    try {
      stage ("Publish App Nexus")
      {
           withCredentials([[$class: 'UsernamePasswordMultiBinding',
                            credentialsId: 'nexusCredentials',
                            usernameVariable: 'REPOSITORY_MANAGER_USER',
                            passwordVariable: 'REPOSITORY_MANAGER_PASSWORD']])
            {
               sh """
                pushd ${workspaceDir}/${appName}/
                gradle upload
                popd
                """
            }
       }
       stage ("Publish Docker App")
       {
       withCredentials([[$class: 'UsernamePasswordMultiBinding',
                      credentialsId: 'dockerCredentials',
                      usernameVariable: 'OPENSHIFT_USERNAME',
                      passwordVariable: 'OPENSHIFT_PASSWORD']])
           {
               // Run all tasks on the app. This includes pushing to OpenShift and S3.
               sh """
               pushd ${workspaceDir}/${appName}
               gradle ${GRADLE_TASK}
               popd
               """
           }
       }
       stage ("Clean")
       {
            sh """
            rm -rf ${workspaceDir}/${appName}/
            """
       }
    }
    catch(e){
        echo e.toString()
        currentBuild.result = "FAILED"
    }
  stage("Clean Workspace"){
     step([$class: 'WsCleanup'])
  }
}


